<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 도서등록  SQL -->
<mapper namespace="com.spring.manage.dao.BookDAO">


<!-- 전체 조회 -->
<select id="selectAll" parameterType="map" resultType="BookVO">
	SELECT b.num, b.title, b.publisher, b.author, b.content, b.imageurl, l.status
	FROM books b, 
	(SELECT * 
	FROM lend 
	WHERE num in (SELECT max(num) FROM lend GROUP BY booknum)) l
	WHERE b.num=l.booknum(+)
	AND 
	<choose>
 		<when test="searchType=='title'">
			title LIKE '%'||#{searchValue}||'%'
  		</when>
  		<when test="searchType=='publisher'">
			publisher LIKE '%'||#{searchValue}||'%'
  		</when>
  		<when test="searchType=='author'">
			author LIKE '%'||#{searchValue}||'%'
  		</when>
  		<when test="searchType=='status' and searchValue=='Yes'">
			(status IS NULL OR status IN ('returned', 'rejected', 'delay_returned'))
  		</when>
  		<when test="searchType=='status' and searchValue=='Nope'">
			status IN ('reserved', 'lent', 'delayed')
  		</when>
  	</choose>
</select>

<!-- 하나 조회 -->
<select id="selectOne" resultType="BookVO" parameterType="int">
	SELECT b.num, b.title, b.publisher, b.author, b.content, b.imageurl, l.status
	FROM books b, 
	(SELECT * 
	FROM lend 
	WHERE num in (SELECT max(num) FROM lend GROUP BY booknum)) l
	WHERE b.num=l.booknum(+)
	AND b.num=#{num}
</select>

<!-- 책등록 -->
<insert id="insert" parameterType="BookVO">
	INSERT INTO books
	VALUES
	(books_seq.nextval, #{title}, #{publisher}, #{author}, #{content}, #{imageurl})
</insert>

<!-- 대출신청 -->
<!--<insert id="reserveBook" parameterType="map"> -->
<!--	INSERT INTO lend (num, mem_num, booknum, startdate, status) -->
<!--	VALUES -->
<!--	(lend_seq.nextval, #{mem_num}, #{booknum}, sysdate, 'reserved') -->
<!-- </insert> -->

<!-- 캘린더관련-->
<!-- 대출신청 : 파라미터 map => LendVO로 변경-->
<insert id="reserveBook" parameterType="LendVO">
    INSERT INTO lend (num, mem_num, booknum, startdate, status)
    VALUES
    (lend_seq.nextval, #{mem_num}, #{booknum}, sysdate, 'reserved')
    
    <selectKey keyProperty="num" resultType="int" order="AFTER"> 
        SELECT LEND_SEQ.CURRVAL FROM DUAL
    </selectKey>
    
</insert>

<!-- 대여신청한 도서의 제목 가져오기 -->
<select id="getBookTitle" parameterType="LendVO" resultType="String">
    SELECT TITLE FROM BOOKS WHERE NUM = #{booknum}
</select>

<!-- 캘린더 - 대여요청건 EVENT 테이블에 insert , 반납예정일자만 insert 이후 리턴, 연체일자 추가하기-->
<insert id="addEvent" parameterType="LendVO">
    INSERT INTO EVENT VALUES (
      #{mem_num}, '대여요청', 'EV'||EV_SEQ.NEXTVAL, #{title}, 1,
      TO_TIMESTAMP(#{startdate}||' '||'00:00:00', 'YY/MM/DD HH24:MI:SS'),
      TO_TIMESTAMP(#{startdate}||' '||'00:00:00', 'YY/MM/DD HH24:MI:SS'), null, null, 
      0, 0, 0, 0, 0, 0, 0,
      null, '#4286f4', null, '#FFFFFF', 'BR'||#{num}
    )

</insert>

<!-- 대출이력 열람 -->
<select id="borrowList" parameterType="string" resultType="LendVO">
	SELECT l.num, l.mem_num, l.booknum, to_char(l.startdate,'yyyy.mm.dd') startdate, to_char(l.enddate,'yyyy.mm.dd') enddate, to_char(l.returndate,'yyyy.mm.dd') returndate, b.title, l.status
	FROM lend l, books b
	WHERE mem_num=#{mem_num}
	AND l.booknum=b.num
	ORDER BY startdate DESC
</select>

<!-- 전체 레코드 개수 -->
<select id="getBookCount" parameterType="map" resultType="int">
	SELECT count(*) FROM (
	SELECT b.num, b.title, b.publisher, b.author, b.content, b.imageurl, l.status
	FROM books b, 
	(SELECT * 
	FROM lend 
	WHERE num in (SELECT max(num) FROM lend GROUP BY booknum)) l
	WHERE b.num=l.booknum(+)
	AND 
	<choose>
 		<when test="searchType=='title'">
			title LIKE '%'||#{searchValue}||'%'
  		</when>
  		<when test="searchType=='publisher'">
			publisher LIKE '%'||#{searchValue}||'%'
  		</when>
  		<when test="searchType=='author'">
			author LIKE '%'||#{searchValue}||'%'
  		</when>
  		<when test="searchType=='status' and searchValue=='Yes'">
			(status IS NULL OR status IN ('returned', 'rejected', 'delay_returned'))
  		</when>
  		<when test="searchType=='status' and searchValue=='Nope'">
			status IN ('reserved', 'lent', 'delayed')
  		</when>
  	</choose>
  	)
</select>

<!-- 전체 대출이력 개수 -->
<select id="getBorrowCount" parameterType="string" resultType="int">
	SELECT count(*) FROM (
	SELECT num, mem_num, booknum, to_char(startdate,'yyyy.mm.dd') startdate, to_char(enddate,'yyyy.mm.dd') enddate, to_char(returndate,'yyyy.mm.dd') returndate, status
	FROM lend
	WHERE mem_num=#{mem_num}
	ORDER BY startdate DESC)
</select>

</mapper>
